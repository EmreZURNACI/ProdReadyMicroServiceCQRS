FROM golang:latest

RUN mkdir /app

WORKDIR /app

COPY ./internal ./internal
COPY ./pkg ./pkg
COPY ./go.mod ./go.mod
COPY ./go.sum ./go.sum
COPY ./main.go ./main.go

RUN go mod tidy
RUN go mod download 


CMD ["go","run","main.go"]


EXPOSE 8080



# # Build stage
# FROM golang:latest AS builder


# RUN mkdir /app
# WORKDIR /app

# # Copy go mod files first to leverage Docker cache
# COPY ./internal ./internal
# COPY ./pkg ./pkg
# COPY ./go.mod ./go.mod
# COPY ./go.sum ./go.sum
# COPY ./main.go ./main.go

# RUN go mod download

# # Copy the rest of the source code
# COPY . .

# # Build the application
# RUN CGO_ENABLED=0 GOOS=linux go build -o main .

# # Final stage
# FROM alpine:3.19

# WORKDIR /app

# # Add non-root user for security
# RUN adduser -D appuser
# USER appuser

# # Copy only the binary from builder
# COPY --from=builder /app/main .

# # Copy the config file
# COPY internal/.config .

# # Expose the port your application runs on (adjust as needed)
# EXPOSE 8080

# # Run the binary
# CMD ["./main"]